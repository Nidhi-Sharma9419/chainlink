// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	hexutil "github.com/ethereum/go-ethereum/common/hexutil"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmTypes(in *jlexer.Lexer, out *transactionInternal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gasPrice":
			if in.IsNull() {
				in.Skip()
				out.GasPrice = nil
			} else {
				if out.GasPrice == nil {
					out.GasPrice = new(hexutil.Big)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.GasPrice).UnmarshalJSON(data))
				}
			}
		case "gas":
			if in.IsNull() {
				in.Skip()
				out.Gas = nil
			} else {
				if out.Gas == nil {
					out.Gas = new(hexutil.Uint64)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Gas).UnmarshalJSON(data))
				}
			}
		case "maxFeePerGas":
			if in.IsNull() {
				in.Skip()
				out.MaxFeePerGas = nil
			} else {
				if out.MaxFeePerGas == nil {
					out.MaxFeePerGas = new(hexutil.Big)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.MaxFeePerGas).UnmarshalJSON(data))
				}
			}
		case "maxPriorityFeePerGas":
			if in.IsNull() {
				in.Skip()
				out.MaxPriorityFeePerGas = nil
			} else {
				if out.MaxPriorityFeePerGas == nil {
					out.MaxPriorityFeePerGas = new(hexutil.Big)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.MaxPriorityFeePerGas).UnmarshalJSON(data))
				}
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(TxType)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Type).UnmarshalJSON(data))
				}
			}
		case "hash":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Hash).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmTypes(out *jwriter.Writer, in transactionInternal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"gasPrice\":"
		out.RawString(prefix[1:])
		if in.GasPrice == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.GasPrice).MarshalText())
		}
	}
	{
		const prefix string = ",\"gas\":"
		out.RawString(prefix)
		if in.Gas == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.Gas).MarshalText())
		}
	}
	{
		const prefix string = ",\"maxFeePerGas\":"
		out.RawString(prefix)
		if in.MaxFeePerGas == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.MaxFeePerGas).MarshalText())
		}
	}
	{
		const prefix string = ",\"maxPriorityFeePerGas\":"
		out.RawString(prefix)
		if in.MaxPriorityFeePerGas == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.MaxPriorityFeePerGas).MarshalText())
		}
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		if in.Type == nil {
			out.RawString("null")
		} else {
			out.Uint8(uint8(*in.Type))
		}
	}
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix)
		out.RawText((in.Hash).MarshalText())
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v transactionInternal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmTypes(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *transactionInternal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmTypes(l, v)
}
func easyjsonD2b7633eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmTypes1(in *jlexer.Lexer, out *blockInternal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "number":
			out.Number = string(in.String())
		case "hash":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Hash).UnmarshalJSON(data))
			}
		case "parentHash":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ParentHash).UnmarshalJSON(data))
			}
		case "baseFeePerGas":
			if in.IsNull() {
				in.Skip()
				out.BaseFeePerGas = nil
			} else {
				if out.BaseFeePerGas == nil {
					out.BaseFeePerGas = new(hexutil.Big)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.BaseFeePerGas).UnmarshalJSON(data))
				}
			}
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "transactions":
			if in.IsNull() {
				in.Skip()
				out.Transactions = nil
			} else {
				in.Delim('[')
				if out.Transactions == nil {
					if !in.IsDelim(']') {
						out.Transactions = make([]Transaction, 0, 0)
					} else {
						out.Transactions = []Transaction{}
					}
				} else {
					out.Transactions = (out.Transactions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Transaction
					if data := in.Raw(); in.Ok() {
						in.AddError((v1).UnmarshalJSON(data))
					}
					out.Transactions = append(out.Transactions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmTypes1(out *jwriter.Writer, in blockInternal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix[1:])
		out.String(string(in.Number))
	}
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix)
		out.RawText((in.Hash).MarshalText())
	}
	{
		const prefix string = ",\"parentHash\":"
		out.RawString(prefix)
		out.RawText((in.ParentHash).MarshalText())
	}
	{
		const prefix string = ",\"baseFeePerGas\":"
		out.RawString(prefix)
		if in.BaseFeePerGas == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.BaseFeePerGas).MarshalText())
		}
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.RawText((in.Timestamp).MarshalText())
	}
	{
		const prefix string = ",\"transactions\":"
		out.RawString(prefix)
		if in.Transactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Transactions {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Raw((v3).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v blockInternal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmTypes1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *blockInternal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmTypes1(l, v)
}
