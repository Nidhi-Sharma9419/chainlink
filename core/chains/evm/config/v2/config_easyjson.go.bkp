// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v2

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	decimal "github.com/shopspring/decimal"
	assets "github.com/smartcontractkit/chainlink/core/assets"
	ethkey "github.com/smartcontractkit/chainlink/core/services/keystore/keys/ethkey"
	models "github.com/smartcontractkit/chainlink/core/store/models"
	utils "github.com/smartcontractkit/chainlink/core/utils"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV2(in *jlexer.Lexer, out *Transactions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ForwardersEnabled":
			if in.IsNull() {
				in.Skip()
				out.ForwardersEnabled = nil
			} else {
				if out.ForwardersEnabled == nil {
					out.ForwardersEnabled = new(bool)
				}
				*out.ForwardersEnabled = bool(in.Bool())
			}
		case "MaxInFlight":
			if in.IsNull() {
				in.Skip()
				out.MaxInFlight = nil
			} else {
				if out.MaxInFlight == nil {
					out.MaxInFlight = new(uint32)
				}
				*out.MaxInFlight = uint32(in.Uint32())
			}
		case "MaxQueued":
			if in.IsNull() {
				in.Skip()
				out.MaxQueued = nil
			} else {
				if out.MaxQueued == nil {
					out.MaxQueued = new(uint32)
				}
				*out.MaxQueued = uint32(in.Uint32())
			}
		case "ReaperInterval":
			if in.IsNull() {
				in.Skip()
				out.ReaperInterval = nil
			} else {
				if out.ReaperInterval == nil {
					out.ReaperInterval = new(models.Duration)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReaperInterval).UnmarshalJSON(data))
				}
			}
		case "ReaperThreshold":
			if in.IsNull() {
				in.Skip()
				out.ReaperThreshold = nil
			} else {
				if out.ReaperThreshold == nil {
					out.ReaperThreshold = new(models.Duration)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReaperThreshold).UnmarshalJSON(data))
				}
			}
		case "ResendAfterThreshold":
			if in.IsNull() {
				in.Skip()
				out.ResendAfterThreshold = nil
			} else {
				if out.ResendAfterThreshold == nil {
					out.ResendAfterThreshold = new(models.Duration)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ResendAfterThreshold).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV2(out *jwriter.Writer, in Transactions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ForwardersEnabled\":"
		out.RawString(prefix[1:])
		if in.ForwardersEnabled == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.ForwardersEnabled))
		}
	}
	{
		const prefix string = ",\"MaxInFlight\":"
		out.RawString(prefix)
		if in.MaxInFlight == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.MaxInFlight))
		}
	}
	{
		const prefix string = ",\"MaxQueued\":"
		out.RawString(prefix)
		if in.MaxQueued == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.MaxQueued))
		}
	}
	{
		const prefix string = ",\"ReaperInterval\":"
		out.RawString(prefix)
		if in.ReaperInterval == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReaperInterval).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"ReaperThreshold\":"
		out.RawString(prefix)
		if in.ReaperThreshold == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReaperThreshold).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"ResendAfterThreshold\":"
		out.RawString(prefix)
		if in.ResendAfterThreshold == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ResendAfterThreshold).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Transactions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Transactions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Transactions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Transactions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV2(l, v)
}
func easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV21(in *jlexer.Lexer, out *OCR2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Automation":
			(out.Automation).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV21(out *jwriter.Writer, in OCR2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Automation\":"
		out.RawString(prefix[1:])
		(in.Automation).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OCR2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OCR2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OCR2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OCR2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV21(l, v)
}
func easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV22(in *jlexer.Lexer, out *OCR) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ContractConfirmations":
			if in.IsNull() {
				in.Skip()
				out.ContractConfirmations = nil
			} else {
				if out.ContractConfirmations == nil {
					out.ContractConfirmations = new(uint16)
				}
				*out.ContractConfirmations = uint16(in.Uint16())
			}
		case "ContractTransmitterTransmitTimeout":
			if in.IsNull() {
				in.Skip()
				out.ContractTransmitterTransmitTimeout = nil
			} else {
				if out.ContractTransmitterTransmitTimeout == nil {
					out.ContractTransmitterTransmitTimeout = new(models.Duration)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ContractTransmitterTransmitTimeout).UnmarshalJSON(data))
				}
			}
		case "DatabaseTimeout":
			if in.IsNull() {
				in.Skip()
				out.DatabaseTimeout = nil
			} else {
				if out.DatabaseTimeout == nil {
					out.DatabaseTimeout = new(models.Duration)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DatabaseTimeout).UnmarshalJSON(data))
				}
			}
		case "ObservationGracePeriod":
			if in.IsNull() {
				in.Skip()
				out.ObservationGracePeriod = nil
			} else {
				if out.ObservationGracePeriod == nil {
					out.ObservationGracePeriod = new(models.Duration)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ObservationGracePeriod).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV22(out *jwriter.Writer, in OCR) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ContractConfirmations\":"
		out.RawString(prefix[1:])
		if in.ContractConfirmations == nil {
			out.RawString("null")
		} else {
			out.Uint16(uint16(*in.ContractConfirmations))
		}
	}
	{
		const prefix string = ",\"ContractTransmitterTransmitTimeout\":"
		out.RawString(prefix)
		if in.ContractTransmitterTransmitTimeout == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ContractTransmitterTransmitTimeout).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"DatabaseTimeout\":"
		out.RawString(prefix)
		if in.DatabaseTimeout == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DatabaseTimeout).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"ObservationGracePeriod\":"
		out.RawString(prefix)
		if in.ObservationGracePeriod == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ObservationGracePeriod).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OCR) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OCR) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OCR) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OCR) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV22(l, v)
}
func easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV23(in *jlexer.Lexer, out *NodePool) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PollFailureThreshold":
			if in.IsNull() {
				in.Skip()
				out.PollFailureThreshold = nil
			} else {
				if out.PollFailureThreshold == nil {
					out.PollFailureThreshold = new(uint32)
				}
				*out.PollFailureThreshold = uint32(in.Uint32())
			}
		case "PollInterval":
			if in.IsNull() {
				in.Skip()
				out.PollInterval = nil
			} else {
				if out.PollInterval == nil {
					out.PollInterval = new(models.Duration)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.PollInterval).UnmarshalJSON(data))
				}
			}
		case "SelectionMode":
			if in.IsNull() {
				in.Skip()
				out.SelectionMode = nil
			} else {
				if out.SelectionMode == nil {
					out.SelectionMode = new(string)
				}
				*out.SelectionMode = string(in.String())
			}
		case "SyncThreshold":
			if in.IsNull() {
				in.Skip()
				out.SyncThreshold = nil
			} else {
				if out.SyncThreshold == nil {
					out.SyncThreshold = new(uint32)
				}
				*out.SyncThreshold = uint32(in.Uint32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV23(out *jwriter.Writer, in NodePool) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PollFailureThreshold\":"
		out.RawString(prefix[1:])
		if in.PollFailureThreshold == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.PollFailureThreshold))
		}
	}
	{
		const prefix string = ",\"PollInterval\":"
		out.RawString(prefix)
		if in.PollInterval == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.PollInterval).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"SelectionMode\":"
		out.RawString(prefix)
		if in.SelectionMode == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.SelectionMode))
		}
	}
	{
		const prefix string = ",\"SyncThreshold\":"
		out.RawString(prefix)
		if in.SyncThreshold == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.SyncThreshold))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NodePool) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NodePool) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NodePool) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NodePool) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV23(l, v)
}
func easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV24(in *jlexer.Lexer, out *Node) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "WSURL":
			if in.IsNull() {
				in.Skip()
				out.WSURL = nil
			} else {
				if out.WSURL == nil {
					out.WSURL = new(models.URL)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.WSURL).UnmarshalText(data))
				}
			}
		case "HTTPURL":
			if in.IsNull() {
				in.Skip()
				out.HTTPURL = nil
			} else {
				if out.HTTPURL == nil {
					out.HTTPURL = new(models.URL)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.HTTPURL).UnmarshalText(data))
				}
			}
		case "SendOnly":
			if in.IsNull() {
				in.Skip()
				out.SendOnly = nil
			} else {
				if out.SendOnly == nil {
					out.SendOnly = new(bool)
				}
				*out.SendOnly = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV24(out *jwriter.Writer, in Node) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"WSURL\":"
		out.RawString(prefix)
		if in.WSURL == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.WSURL).MarshalText())
		}
	}
	{
		const prefix string = ",\"HTTPURL\":"
		out.RawString(prefix)
		if in.HTTPURL == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.HTTPURL).MarshalText())
		}
	}
	{
		const prefix string = ",\"SendOnly\":"
		out.RawString(prefix)
		if in.SendOnly == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.SendOnly))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Node) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Node) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Node) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Node) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV24(l, v)
}
func easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV25(in *jlexer.Lexer, out *KeySpecificGasEstimator) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PriceMax":
			if in.IsNull() {
				in.Skip()
				out.PriceMax = nil
			} else {
				if out.PriceMax == nil {
					out.PriceMax = new(assets.Wei)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.PriceMax).UnmarshalText(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV25(out *jwriter.Writer, in KeySpecificGasEstimator) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PriceMax\":"
		out.RawString(prefix[1:])
		if in.PriceMax == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.PriceMax).MarshalText())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KeySpecificGasEstimator) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KeySpecificGasEstimator) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KeySpecificGasEstimator) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KeySpecificGasEstimator) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV25(l, v)
}
func easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV26(in *jlexer.Lexer, out *KeySpecific) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(ethkey.EIP55Address)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Key).UnmarshalJSON(data))
				}
			}
		case "GasEstimator":
			(out.GasEstimator).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV26(out *jwriter.Writer, in KeySpecific) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Key\":"
		out.RawString(prefix[1:])
		if in.Key == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Key))
		}
	}
	{
		const prefix string = ",\"GasEstimator\":"
		out.RawString(prefix)
		(in.GasEstimator).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KeySpecific) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KeySpecific) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KeySpecific) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KeySpecific) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV26(l, v)
}
func easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV27(in *jlexer.Lexer, out *HeadTracker) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "HistoryDepth":
			if in.IsNull() {
				in.Skip()
				out.HistoryDepth = nil
			} else {
				if out.HistoryDepth == nil {
					out.HistoryDepth = new(uint32)
				}
				*out.HistoryDepth = uint32(in.Uint32())
			}
		case "MaxBufferSize":
			if in.IsNull() {
				in.Skip()
				out.MaxBufferSize = nil
			} else {
				if out.MaxBufferSize == nil {
					out.MaxBufferSize = new(uint32)
				}
				*out.MaxBufferSize = uint32(in.Uint32())
			}
		case "SamplingInterval":
			if in.IsNull() {
				in.Skip()
				out.SamplingInterval = nil
			} else {
				if out.SamplingInterval == nil {
					out.SamplingInterval = new(models.Duration)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.SamplingInterval).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV27(out *jwriter.Writer, in HeadTracker) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"HistoryDepth\":"
		out.RawString(prefix[1:])
		if in.HistoryDepth == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.HistoryDepth))
		}
	}
	{
		const prefix string = ",\"MaxBufferSize\":"
		out.RawString(prefix)
		if in.MaxBufferSize == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.MaxBufferSize))
		}
	}
	{
		const prefix string = ",\"SamplingInterval\":"
		out.RawString(prefix)
		if in.SamplingInterval == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.SamplingInterval).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HeadTracker) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HeadTracker) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HeadTracker) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HeadTracker) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV27(l, v)
}
func easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV28(in *jlexer.Lexer, out *GasLimitJobType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OCR":
			if in.IsNull() {
				in.Skip()
				out.OCR = nil
			} else {
				if out.OCR == nil {
					out.OCR = new(uint32)
				}
				*out.OCR = uint32(in.Uint32())
			}
		case "DR":
			if in.IsNull() {
				in.Skip()
				out.DR = nil
			} else {
				if out.DR == nil {
					out.DR = new(uint32)
				}
				*out.DR = uint32(in.Uint32())
			}
		case "VRF":
			if in.IsNull() {
				in.Skip()
				out.VRF = nil
			} else {
				if out.VRF == nil {
					out.VRF = new(uint32)
				}
				*out.VRF = uint32(in.Uint32())
			}
		case "FM":
			if in.IsNull() {
				in.Skip()
				out.FM = nil
			} else {
				if out.FM == nil {
					out.FM = new(uint32)
				}
				*out.FM = uint32(in.Uint32())
			}
		case "Keeper":
			if in.IsNull() {
				in.Skip()
				out.Keeper = nil
			} else {
				if out.Keeper == nil {
					out.Keeper = new(uint32)
				}
				*out.Keeper = uint32(in.Uint32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV28(out *jwriter.Writer, in GasLimitJobType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"OCR\":"
		out.RawString(prefix[1:])
		if in.OCR == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.OCR))
		}
	}
	{
		const prefix string = ",\"DR\":"
		out.RawString(prefix)
		if in.DR == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.DR))
		}
	}
	{
		const prefix string = ",\"VRF\":"
		out.RawString(prefix)
		if in.VRF == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.VRF))
		}
	}
	{
		const prefix string = ",\"FM\":"
		out.RawString(prefix)
		if in.FM == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.FM))
		}
	}
	{
		const prefix string = ",\"Keeper\":"
		out.RawString(prefix)
		if in.Keeper == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.Keeper))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GasLimitJobType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GasLimitJobType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GasLimitJobType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GasLimitJobType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV28(l, v)
}
func easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV29(in *jlexer.Lexer, out *GasEstimator) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Mode":
			if in.IsNull() {
				in.Skip()
				out.Mode = nil
			} else {
				if out.Mode == nil {
					out.Mode = new(string)
				}
				*out.Mode = string(in.String())
			}
		case "PriceDefault":
			if in.IsNull() {
				in.Skip()
				out.PriceDefault = nil
			} else {
				if out.PriceDefault == nil {
					out.PriceDefault = new(assets.Wei)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.PriceDefault).UnmarshalText(data))
				}
			}
		case "PriceMax":
			if in.IsNull() {
				in.Skip()
				out.PriceMax = nil
			} else {
				if out.PriceMax == nil {
					out.PriceMax = new(assets.Wei)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.PriceMax).UnmarshalText(data))
				}
			}
		case "PriceMin":
			if in.IsNull() {
				in.Skip()
				out.PriceMin = nil
			} else {
				if out.PriceMin == nil {
					out.PriceMin = new(assets.Wei)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.PriceMin).UnmarshalText(data))
				}
			}
		case "LimitDefault":
			if in.IsNull() {
				in.Skip()
				out.LimitDefault = nil
			} else {
				if out.LimitDefault == nil {
					out.LimitDefault = new(uint32)
				}
				*out.LimitDefault = uint32(in.Uint32())
			}
		case "LimitMax":
			if in.IsNull() {
				in.Skip()
				out.LimitMax = nil
			} else {
				if out.LimitMax == nil {
					out.LimitMax = new(uint32)
				}
				*out.LimitMax = uint32(in.Uint32())
			}
		case "LimitMultiplier":
			if in.IsNull() {
				in.Skip()
				out.LimitMultiplier = nil
			} else {
				if out.LimitMultiplier == nil {
					out.LimitMultiplier = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LimitMultiplier).UnmarshalJSON(data))
				}
			}
		case "LimitTransfer":
			if in.IsNull() {
				in.Skip()
				out.LimitTransfer = nil
			} else {
				if out.LimitTransfer == nil {
					out.LimitTransfer = new(uint32)
				}
				*out.LimitTransfer = uint32(in.Uint32())
			}
		case "LimitJobType":
			(out.LimitJobType).UnmarshalEasyJSON(in)
		case "BumpMin":
			if in.IsNull() {
				in.Skip()
				out.BumpMin = nil
			} else {
				if out.BumpMin == nil {
					out.BumpMin = new(assets.Wei)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.BumpMin).UnmarshalText(data))
				}
			}
		case "BumpPercent":
			if in.IsNull() {
				in.Skip()
				out.BumpPercent = nil
			} else {
				if out.BumpPercent == nil {
					out.BumpPercent = new(uint16)
				}
				*out.BumpPercent = uint16(in.Uint16())
			}
		case "BumpThreshold":
			if in.IsNull() {
				in.Skip()
				out.BumpThreshold = nil
			} else {
				if out.BumpThreshold == nil {
					out.BumpThreshold = new(uint32)
				}
				*out.BumpThreshold = uint32(in.Uint32())
			}
		case "BumpTxDepth":
			if in.IsNull() {
				in.Skip()
				out.BumpTxDepth = nil
			} else {
				if out.BumpTxDepth == nil {
					out.BumpTxDepth = new(uint16)
				}
				*out.BumpTxDepth = uint16(in.Uint16())
			}
		case "EIP1559DynamicFees":
			if in.IsNull() {
				in.Skip()
				out.EIP1559DynamicFees = nil
			} else {
				if out.EIP1559DynamicFees == nil {
					out.EIP1559DynamicFees = new(bool)
				}
				*out.EIP1559DynamicFees = bool(in.Bool())
			}
		case "FeeCapDefault":
			if in.IsNull() {
				in.Skip()
				out.FeeCapDefault = nil
			} else {
				if out.FeeCapDefault == nil {
					out.FeeCapDefault = new(assets.Wei)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.FeeCapDefault).UnmarshalText(data))
				}
			}
		case "TipCapDefault":
			if in.IsNull() {
				in.Skip()
				out.TipCapDefault = nil
			} else {
				if out.TipCapDefault == nil {
					out.TipCapDefault = new(assets.Wei)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.TipCapDefault).UnmarshalText(data))
				}
			}
		case "TipCapMin":
			if in.IsNull() {
				in.Skip()
				out.TipCapMin = nil
			} else {
				if out.TipCapMin == nil {
					out.TipCapMin = new(assets.Wei)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.TipCapMin).UnmarshalText(data))
				}
			}
		case "BlockHistory":
			(out.BlockHistory).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV29(out *jwriter.Writer, in GasEstimator) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Mode\":"
		out.RawString(prefix[1:])
		if in.Mode == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Mode))
		}
	}
	{
		const prefix string = ",\"PriceDefault\":"
		out.RawString(prefix)
		if in.PriceDefault == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.PriceDefault).MarshalText())
		}
	}
	{
		const prefix string = ",\"PriceMax\":"
		out.RawString(prefix)
		if in.PriceMax == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.PriceMax).MarshalText())
		}
	}
	{
		const prefix string = ",\"PriceMin\":"
		out.RawString(prefix)
		if in.PriceMin == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.PriceMin).MarshalText())
		}
	}
	{
		const prefix string = ",\"LimitDefault\":"
		out.RawString(prefix)
		if in.LimitDefault == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.LimitDefault))
		}
	}
	{
		const prefix string = ",\"LimitMax\":"
		out.RawString(prefix)
		if in.LimitMax == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.LimitMax))
		}
	}
	{
		const prefix string = ",\"LimitMultiplier\":"
		out.RawString(prefix)
		if in.LimitMultiplier == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.LimitMultiplier).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"LimitTransfer\":"
		out.RawString(prefix)
		if in.LimitTransfer == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.LimitTransfer))
		}
	}
	{
		const prefix string = ",\"LimitJobType\":"
		out.RawString(prefix)
		(in.LimitJobType).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"BumpMin\":"
		out.RawString(prefix)
		if in.BumpMin == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.BumpMin).MarshalText())
		}
	}
	{
		const prefix string = ",\"BumpPercent\":"
		out.RawString(prefix)
		if in.BumpPercent == nil {
			out.RawString("null")
		} else {
			out.Uint16(uint16(*in.BumpPercent))
		}
	}
	{
		const prefix string = ",\"BumpThreshold\":"
		out.RawString(prefix)
		if in.BumpThreshold == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.BumpThreshold))
		}
	}
	{
		const prefix string = ",\"BumpTxDepth\":"
		out.RawString(prefix)
		if in.BumpTxDepth == nil {
			out.RawString("null")
		} else {
			out.Uint16(uint16(*in.BumpTxDepth))
		}
	}
	{
		const prefix string = ",\"EIP1559DynamicFees\":"
		out.RawString(prefix)
		if in.EIP1559DynamicFees == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.EIP1559DynamicFees))
		}
	}
	{
		const prefix string = ",\"FeeCapDefault\":"
		out.RawString(prefix)
		if in.FeeCapDefault == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.FeeCapDefault).MarshalText())
		}
	}
	{
		const prefix string = ",\"TipCapDefault\":"
		out.RawString(prefix)
		if in.TipCapDefault == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.TipCapDefault).MarshalText())
		}
	}
	{
		const prefix string = ",\"TipCapMin\":"
		out.RawString(prefix)
		if in.TipCapMin == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.TipCapMin).MarshalText())
		}
	}
	{
		const prefix string = ",\"BlockHistory\":"
		out.RawString(prefix)
		(in.BlockHistory).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GasEstimator) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GasEstimator) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GasEstimator) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GasEstimator) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV29(l, v)
}
func easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV210(in *jlexer.Lexer, out *EVMConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ChainID":
			if in.IsNull() {
				in.Skip()
				out.ChainID = nil
			} else {
				if out.ChainID == nil {
					out.ChainID = new(utils.Big)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ChainID).UnmarshalJSON(data))
				}
			}
		case "Enabled":
			if in.IsNull() {
				in.Skip()
				out.Enabled = nil
			} else {
				if out.Enabled == nil {
					out.Enabled = new(bool)
				}
				*out.Enabled = bool(in.Bool())
			}
		case "Nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make(EVMNodes, 0, 8)
					} else {
						out.Nodes = EVMNodes{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Node
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Node)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Nodes = append(out.Nodes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "BlockBackfillDepth":
			if in.IsNull() {
				in.Skip()
				out.BlockBackfillDepth = nil
			} else {
				if out.BlockBackfillDepth == nil {
					out.BlockBackfillDepth = new(uint32)
				}
				*out.BlockBackfillDepth = uint32(in.Uint32())
			}
		case "BlockBackfillSkip":
			if in.IsNull() {
				in.Skip()
				out.BlockBackfillSkip = nil
			} else {
				if out.BlockBackfillSkip == nil {
					out.BlockBackfillSkip = new(bool)
				}
				*out.BlockBackfillSkip = bool(in.Bool())
			}
		case "ChainType":
			if in.IsNull() {
				in.Skip()
				out.ChainType = nil
			} else {
				if out.ChainType == nil {
					out.ChainType = new(string)
				}
				*out.ChainType = string(in.String())
			}
		case "FinalityDepth":
			if in.IsNull() {
				in.Skip()
				out.FinalityDepth = nil
			} else {
				if out.FinalityDepth == nil {
					out.FinalityDepth = new(uint32)
				}
				*out.FinalityDepth = uint32(in.Uint32())
			}
		case "FlagsContractAddress":
			if in.IsNull() {
				in.Skip()
				out.FlagsContractAddress = nil
			} else {
				if out.FlagsContractAddress == nil {
					out.FlagsContractAddress = new(ethkey.EIP55Address)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.FlagsContractAddress).UnmarshalJSON(data))
				}
			}
		case "LinkContractAddress":
			if in.IsNull() {
				in.Skip()
				out.LinkContractAddress = nil
			} else {
				if out.LinkContractAddress == nil {
					out.LinkContractAddress = new(ethkey.EIP55Address)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LinkContractAddress).UnmarshalJSON(data))
				}
			}
		case "LogBackfillBatchSize":
			if in.IsNull() {
				in.Skip()
				out.LogBackfillBatchSize = nil
			} else {
				if out.LogBackfillBatchSize == nil {
					out.LogBackfillBatchSize = new(uint32)
				}
				*out.LogBackfillBatchSize = uint32(in.Uint32())
			}
		case "LogPollInterval":
			if in.IsNull() {
				in.Skip()
				out.LogPollInterval = nil
			} else {
				if out.LogPollInterval == nil {
					out.LogPollInterval = new(models.Duration)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LogPollInterval).UnmarshalJSON(data))
				}
			}
		case "LogKeepBlocksDepth":
			if in.IsNull() {
				in.Skip()
				out.LogKeepBlocksDepth = nil
			} else {
				if out.LogKeepBlocksDepth == nil {
					out.LogKeepBlocksDepth = new(uint32)
				}
				*out.LogKeepBlocksDepth = uint32(in.Uint32())
			}
		case "MinIncomingConfirmations":
			if in.IsNull() {
				in.Skip()
				out.MinIncomingConfirmations = nil
			} else {
				if out.MinIncomingConfirmations == nil {
					out.MinIncomingConfirmations = new(uint32)
				}
				*out.MinIncomingConfirmations = uint32(in.Uint32())
			}
		case "MinContractPayment":
			if in.IsNull() {
				in.Skip()
				out.MinContractPayment = nil
			} else {
				if out.MinContractPayment == nil {
					out.MinContractPayment = new(assets.Link)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.MinContractPayment).UnmarshalJSON(data))
				}
			}
		case "NonceAutoSync":
			if in.IsNull() {
				in.Skip()
				out.NonceAutoSync = nil
			} else {
				if out.NonceAutoSync == nil {
					out.NonceAutoSync = new(bool)
				}
				*out.NonceAutoSync = bool(in.Bool())
			}
		case "NoNewHeadsThreshold":
			if in.IsNull() {
				in.Skip()
				out.NoNewHeadsThreshold = nil
			} else {
				if out.NoNewHeadsThreshold == nil {
					out.NoNewHeadsThreshold = new(models.Duration)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.NoNewHeadsThreshold).UnmarshalJSON(data))
				}
			}
		case "OperatorFactoryAddress":
			if in.IsNull() {
				in.Skip()
				out.OperatorFactoryAddress = nil
			} else {
				if out.OperatorFactoryAddress == nil {
					out.OperatorFactoryAddress = new(ethkey.EIP55Address)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.OperatorFactoryAddress).UnmarshalJSON(data))
				}
			}
		case "RPCDefaultBatchSize":
			if in.IsNull() {
				in.Skip()
				out.RPCDefaultBatchSize = nil
			} else {
				if out.RPCDefaultBatchSize == nil {
					out.RPCDefaultBatchSize = new(uint32)
				}
				*out.RPCDefaultBatchSize = uint32(in.Uint32())
			}
		case "RPCBlockQueryDelay":
			if in.IsNull() {
				in.Skip()
				out.RPCBlockQueryDelay = nil
			} else {
				if out.RPCBlockQueryDelay == nil {
					out.RPCBlockQueryDelay = new(uint16)
				}
				*out.RPCBlockQueryDelay = uint16(in.Uint16())
			}
		case "Transactions":
			(out.Transactions).UnmarshalEasyJSON(in)
		case "BalanceMonitor":
			(out.BalanceMonitor).UnmarshalEasyJSON(in)
		case "GasEstimator":
			(out.GasEstimator).UnmarshalEasyJSON(in)
		case "HeadTracker":
			(out.HeadTracker).UnmarshalEasyJSON(in)
		case "KeySpecific":
			if in.IsNull() {
				in.Skip()
				out.KeySpecific = nil
			} else {
				in.Delim('[')
				if out.KeySpecific == nil {
					if !in.IsDelim(']') {
						out.KeySpecific = make(KeySpecificConfig, 0, 4)
					} else {
						out.KeySpecific = KeySpecificConfig{}
					}
				} else {
					out.KeySpecific = (out.KeySpecific)[:0]
				}
				for !in.IsDelim(']') {
					var v2 KeySpecific
					(v2).UnmarshalEasyJSON(in)
					out.KeySpecific = append(out.KeySpecific, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "NodePool":
			(out.NodePool).UnmarshalEasyJSON(in)
		case "OCR":
			(out.OCR).UnmarshalEasyJSON(in)
		case "OCR2":
			(out.OCR2).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV210(out *jwriter.Writer, in EVMConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ChainID\":"
		out.RawString(prefix[1:])
		if in.ChainID == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ChainID).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"Enabled\":"
		out.RawString(prefix)
		if in.Enabled == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Enabled))
		}
	}
	{
		const prefix string = ",\"Nodes\":"
		out.RawString(prefix)
		if in.Nodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Nodes {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil {
					out.RawString("null")
				} else {
					(*v4).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"BlockBackfillDepth\":"
		out.RawString(prefix)
		if in.BlockBackfillDepth == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.BlockBackfillDepth))
		}
	}
	{
		const prefix string = ",\"BlockBackfillSkip\":"
		out.RawString(prefix)
		if in.BlockBackfillSkip == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.BlockBackfillSkip))
		}
	}
	{
		const prefix string = ",\"ChainType\":"
		out.RawString(prefix)
		if in.ChainType == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ChainType))
		}
	}
	{
		const prefix string = ",\"FinalityDepth\":"
		out.RawString(prefix)
		if in.FinalityDepth == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.FinalityDepth))
		}
	}
	{
		const prefix string = ",\"FlagsContractAddress\":"
		out.RawString(prefix)
		if in.FlagsContractAddress == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.FlagsContractAddress))
		}
	}
	{
		const prefix string = ",\"LinkContractAddress\":"
		out.RawString(prefix)
		if in.LinkContractAddress == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.LinkContractAddress))
		}
	}
	{
		const prefix string = ",\"LogBackfillBatchSize\":"
		out.RawString(prefix)
		if in.LogBackfillBatchSize == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.LogBackfillBatchSize))
		}
	}
	{
		const prefix string = ",\"LogPollInterval\":"
		out.RawString(prefix)
		if in.LogPollInterval == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.LogPollInterval).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"LogKeepBlocksDepth\":"
		out.RawString(prefix)
		if in.LogKeepBlocksDepth == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.LogKeepBlocksDepth))
		}
	}
	{
		const prefix string = ",\"MinIncomingConfirmations\":"
		out.RawString(prefix)
		if in.MinIncomingConfirmations == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.MinIncomingConfirmations))
		}
	}
	{
		const prefix string = ",\"MinContractPayment\":"
		out.RawString(prefix)
		if in.MinContractPayment == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.MinContractPayment).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"NonceAutoSync\":"
		out.RawString(prefix)
		if in.NonceAutoSync == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.NonceAutoSync))
		}
	}
	{
		const prefix string = ",\"NoNewHeadsThreshold\":"
		out.RawString(prefix)
		if in.NoNewHeadsThreshold == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.NoNewHeadsThreshold).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"OperatorFactoryAddress\":"
		out.RawString(prefix)
		if in.OperatorFactoryAddress == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.OperatorFactoryAddress))
		}
	}
	{
		const prefix string = ",\"RPCDefaultBatchSize\":"
		out.RawString(prefix)
		if in.RPCDefaultBatchSize == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.RPCDefaultBatchSize))
		}
	}
	{
		const prefix string = ",\"RPCBlockQueryDelay\":"
		out.RawString(prefix)
		if in.RPCBlockQueryDelay == nil {
			out.RawString("null")
		} else {
			out.Uint16(uint16(*in.RPCBlockQueryDelay))
		}
	}
	{
		const prefix string = ",\"Transactions\":"
		out.RawString(prefix)
		(in.Transactions).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"BalanceMonitor\":"
		out.RawString(prefix)
		(in.BalanceMonitor).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"GasEstimator\":"
		out.RawString(prefix)
		(in.GasEstimator).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"HeadTracker\":"
		out.RawString(prefix)
		(in.HeadTracker).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"KeySpecific\":"
		out.RawString(prefix)
		if in.KeySpecific == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.KeySpecific {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"NodePool\":"
		out.RawString(prefix)
		(in.NodePool).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"OCR\":"
		out.RawString(prefix)
		(in.OCR).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"OCR2\":"
		out.RawString(prefix)
		(in.OCR2).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EVMConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV210(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EVMConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV210(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EVMConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV210(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EVMConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV210(l, v)
}
func easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV211(in *jlexer.Lexer, out *Chain) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "BlockBackfillDepth":
			if in.IsNull() {
				in.Skip()
				out.BlockBackfillDepth = nil
			} else {
				if out.BlockBackfillDepth == nil {
					out.BlockBackfillDepth = new(uint32)
				}
				*out.BlockBackfillDepth = uint32(in.Uint32())
			}
		case "BlockBackfillSkip":
			if in.IsNull() {
				in.Skip()
				out.BlockBackfillSkip = nil
			} else {
				if out.BlockBackfillSkip == nil {
					out.BlockBackfillSkip = new(bool)
				}
				*out.BlockBackfillSkip = bool(in.Bool())
			}
		case "ChainType":
			if in.IsNull() {
				in.Skip()
				out.ChainType = nil
			} else {
				if out.ChainType == nil {
					out.ChainType = new(string)
				}
				*out.ChainType = string(in.String())
			}
		case "FinalityDepth":
			if in.IsNull() {
				in.Skip()
				out.FinalityDepth = nil
			} else {
				if out.FinalityDepth == nil {
					out.FinalityDepth = new(uint32)
				}
				*out.FinalityDepth = uint32(in.Uint32())
			}
		case "FlagsContractAddress":
			if in.IsNull() {
				in.Skip()
				out.FlagsContractAddress = nil
			} else {
				if out.FlagsContractAddress == nil {
					out.FlagsContractAddress = new(ethkey.EIP55Address)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.FlagsContractAddress).UnmarshalJSON(data))
				}
			}
		case "LinkContractAddress":
			if in.IsNull() {
				in.Skip()
				out.LinkContractAddress = nil
			} else {
				if out.LinkContractAddress == nil {
					out.LinkContractAddress = new(ethkey.EIP55Address)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LinkContractAddress).UnmarshalJSON(data))
				}
			}
		case "LogBackfillBatchSize":
			if in.IsNull() {
				in.Skip()
				out.LogBackfillBatchSize = nil
			} else {
				if out.LogBackfillBatchSize == nil {
					out.LogBackfillBatchSize = new(uint32)
				}
				*out.LogBackfillBatchSize = uint32(in.Uint32())
			}
		case "LogPollInterval":
			if in.IsNull() {
				in.Skip()
				out.LogPollInterval = nil
			} else {
				if out.LogPollInterval == nil {
					out.LogPollInterval = new(models.Duration)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LogPollInterval).UnmarshalJSON(data))
				}
			}
		case "LogKeepBlocksDepth":
			if in.IsNull() {
				in.Skip()
				out.LogKeepBlocksDepth = nil
			} else {
				if out.LogKeepBlocksDepth == nil {
					out.LogKeepBlocksDepth = new(uint32)
				}
				*out.LogKeepBlocksDepth = uint32(in.Uint32())
			}
		case "MinIncomingConfirmations":
			if in.IsNull() {
				in.Skip()
				out.MinIncomingConfirmations = nil
			} else {
				if out.MinIncomingConfirmations == nil {
					out.MinIncomingConfirmations = new(uint32)
				}
				*out.MinIncomingConfirmations = uint32(in.Uint32())
			}
		case "MinContractPayment":
			if in.IsNull() {
				in.Skip()
				out.MinContractPayment = nil
			} else {
				if out.MinContractPayment == nil {
					out.MinContractPayment = new(assets.Link)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.MinContractPayment).UnmarshalJSON(data))
				}
			}
		case "NonceAutoSync":
			if in.IsNull() {
				in.Skip()
				out.NonceAutoSync = nil
			} else {
				if out.NonceAutoSync == nil {
					out.NonceAutoSync = new(bool)
				}
				*out.NonceAutoSync = bool(in.Bool())
			}
		case "NoNewHeadsThreshold":
			if in.IsNull() {
				in.Skip()
				out.NoNewHeadsThreshold = nil
			} else {
				if out.NoNewHeadsThreshold == nil {
					out.NoNewHeadsThreshold = new(models.Duration)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.NoNewHeadsThreshold).UnmarshalJSON(data))
				}
			}
		case "OperatorFactoryAddress":
			if in.IsNull() {
				in.Skip()
				out.OperatorFactoryAddress = nil
			} else {
				if out.OperatorFactoryAddress == nil {
					out.OperatorFactoryAddress = new(ethkey.EIP55Address)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.OperatorFactoryAddress).UnmarshalJSON(data))
				}
			}
		case "RPCDefaultBatchSize":
			if in.IsNull() {
				in.Skip()
				out.RPCDefaultBatchSize = nil
			} else {
				if out.RPCDefaultBatchSize == nil {
					out.RPCDefaultBatchSize = new(uint32)
				}
				*out.RPCDefaultBatchSize = uint32(in.Uint32())
			}
		case "RPCBlockQueryDelay":
			if in.IsNull() {
				in.Skip()
				out.RPCBlockQueryDelay = nil
			} else {
				if out.RPCBlockQueryDelay == nil {
					out.RPCBlockQueryDelay = new(uint16)
				}
				*out.RPCBlockQueryDelay = uint16(in.Uint16())
			}
		case "Transactions":
			(out.Transactions).UnmarshalEasyJSON(in)
		case "BalanceMonitor":
			(out.BalanceMonitor).UnmarshalEasyJSON(in)
		case "GasEstimator":
			(out.GasEstimator).UnmarshalEasyJSON(in)
		case "HeadTracker":
			(out.HeadTracker).UnmarshalEasyJSON(in)
		case "KeySpecific":
			if in.IsNull() {
				in.Skip()
				out.KeySpecific = nil
			} else {
				in.Delim('[')
				if out.KeySpecific == nil {
					if !in.IsDelim(']') {
						out.KeySpecific = make(KeySpecificConfig, 0, 4)
					} else {
						out.KeySpecific = KeySpecificConfig{}
					}
				} else {
					out.KeySpecific = (out.KeySpecific)[:0]
				}
				for !in.IsDelim(']') {
					var v7 KeySpecific
					(v7).UnmarshalEasyJSON(in)
					out.KeySpecific = append(out.KeySpecific, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "NodePool":
			(out.NodePool).UnmarshalEasyJSON(in)
		case "OCR":
			(out.OCR).UnmarshalEasyJSON(in)
		case "OCR2":
			(out.OCR2).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV211(out *jwriter.Writer, in Chain) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"BlockBackfillDepth\":"
		out.RawString(prefix[1:])
		if in.BlockBackfillDepth == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.BlockBackfillDepth))
		}
	}
	{
		const prefix string = ",\"BlockBackfillSkip\":"
		out.RawString(prefix)
		if in.BlockBackfillSkip == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.BlockBackfillSkip))
		}
	}
	{
		const prefix string = ",\"ChainType\":"
		out.RawString(prefix)
		if in.ChainType == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ChainType))
		}
	}
	{
		const prefix string = ",\"FinalityDepth\":"
		out.RawString(prefix)
		if in.FinalityDepth == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.FinalityDepth))
		}
	}
	{
		const prefix string = ",\"FlagsContractAddress\":"
		out.RawString(prefix)
		if in.FlagsContractAddress == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.FlagsContractAddress))
		}
	}
	{
		const prefix string = ",\"LinkContractAddress\":"
		out.RawString(prefix)
		if in.LinkContractAddress == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.LinkContractAddress))
		}
	}
	{
		const prefix string = ",\"LogBackfillBatchSize\":"
		out.RawString(prefix)
		if in.LogBackfillBatchSize == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.LogBackfillBatchSize))
		}
	}
	{
		const prefix string = ",\"LogPollInterval\":"
		out.RawString(prefix)
		if in.LogPollInterval == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.LogPollInterval).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"LogKeepBlocksDepth\":"
		out.RawString(prefix)
		if in.LogKeepBlocksDepth == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.LogKeepBlocksDepth))
		}
	}
	{
		const prefix string = ",\"MinIncomingConfirmations\":"
		out.RawString(prefix)
		if in.MinIncomingConfirmations == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.MinIncomingConfirmations))
		}
	}
	{
		const prefix string = ",\"MinContractPayment\":"
		out.RawString(prefix)
		if in.MinContractPayment == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.MinContractPayment).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"NonceAutoSync\":"
		out.RawString(prefix)
		if in.NonceAutoSync == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.NonceAutoSync))
		}
	}
	{
		const prefix string = ",\"NoNewHeadsThreshold\":"
		out.RawString(prefix)
		if in.NoNewHeadsThreshold == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.NoNewHeadsThreshold).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"OperatorFactoryAddress\":"
		out.RawString(prefix)
		if in.OperatorFactoryAddress == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.OperatorFactoryAddress))
		}
	}
	{
		const prefix string = ",\"RPCDefaultBatchSize\":"
		out.RawString(prefix)
		if in.RPCDefaultBatchSize == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.RPCDefaultBatchSize))
		}
	}
	{
		const prefix string = ",\"RPCBlockQueryDelay\":"
		out.RawString(prefix)
		if in.RPCBlockQueryDelay == nil {
			out.RawString("null")
		} else {
			out.Uint16(uint16(*in.RPCBlockQueryDelay))
		}
	}
	{
		const prefix string = ",\"Transactions\":"
		out.RawString(prefix)
		(in.Transactions).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"BalanceMonitor\":"
		out.RawString(prefix)
		(in.BalanceMonitor).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"GasEstimator\":"
		out.RawString(prefix)
		(in.GasEstimator).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"HeadTracker\":"
		out.RawString(prefix)
		(in.HeadTracker).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"KeySpecific\":"
		out.RawString(prefix)
		if in.KeySpecific == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.KeySpecific {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"NodePool\":"
		out.RawString(prefix)
		(in.NodePool).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"OCR\":"
		out.RawString(prefix)
		(in.OCR).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"OCR2\":"
		out.RawString(prefix)
		(in.OCR2).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Chain) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV211(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Chain) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV211(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Chain) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV211(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Chain) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV211(l, v)
}
func easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV212(in *jlexer.Lexer, out *BlockHistoryEstimator) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "BatchSize":
			if in.IsNull() {
				in.Skip()
				out.BatchSize = nil
			} else {
				if out.BatchSize == nil {
					out.BatchSize = new(uint32)
				}
				*out.BatchSize = uint32(in.Uint32())
			}
		case "BlockHistorySize":
			if in.IsNull() {
				in.Skip()
				out.BlockHistorySize = nil
			} else {
				if out.BlockHistorySize == nil {
					out.BlockHistorySize = new(uint16)
				}
				*out.BlockHistorySize = uint16(in.Uint16())
			}
		case "CheckInclusionBlocks":
			if in.IsNull() {
				in.Skip()
				out.CheckInclusionBlocks = nil
			} else {
				if out.CheckInclusionBlocks == nil {
					out.CheckInclusionBlocks = new(uint16)
				}
				*out.CheckInclusionBlocks = uint16(in.Uint16())
			}
		case "CheckInclusionPercentile":
			if in.IsNull() {
				in.Skip()
				out.CheckInclusionPercentile = nil
			} else {
				if out.CheckInclusionPercentile == nil {
					out.CheckInclusionPercentile = new(uint16)
				}
				*out.CheckInclusionPercentile = uint16(in.Uint16())
			}
		case "EIP1559FeeCapBufferBlocks":
			if in.IsNull() {
				in.Skip()
				out.EIP1559FeeCapBufferBlocks = nil
			} else {
				if out.EIP1559FeeCapBufferBlocks == nil {
					out.EIP1559FeeCapBufferBlocks = new(uint16)
				}
				*out.EIP1559FeeCapBufferBlocks = uint16(in.Uint16())
			}
		case "TransactionPercentile":
			if in.IsNull() {
				in.Skip()
				out.TransactionPercentile = nil
			} else {
				if out.TransactionPercentile == nil {
					out.TransactionPercentile = new(uint16)
				}
				*out.TransactionPercentile = uint16(in.Uint16())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV212(out *jwriter.Writer, in BlockHistoryEstimator) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"BatchSize\":"
		out.RawString(prefix[1:])
		if in.BatchSize == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.BatchSize))
		}
	}
	{
		const prefix string = ",\"BlockHistorySize\":"
		out.RawString(prefix)
		if in.BlockHistorySize == nil {
			out.RawString("null")
		} else {
			out.Uint16(uint16(*in.BlockHistorySize))
		}
	}
	{
		const prefix string = ",\"CheckInclusionBlocks\":"
		out.RawString(prefix)
		if in.CheckInclusionBlocks == nil {
			out.RawString("null")
		} else {
			out.Uint16(uint16(*in.CheckInclusionBlocks))
		}
	}
	{
		const prefix string = ",\"CheckInclusionPercentile\":"
		out.RawString(prefix)
		if in.CheckInclusionPercentile == nil {
			out.RawString("null")
		} else {
			out.Uint16(uint16(*in.CheckInclusionPercentile))
		}
	}
	{
		const prefix string = ",\"EIP1559FeeCapBufferBlocks\":"
		out.RawString(prefix)
		if in.EIP1559FeeCapBufferBlocks == nil {
			out.RawString("null")
		} else {
			out.Uint16(uint16(*in.EIP1559FeeCapBufferBlocks))
		}
	}
	{
		const prefix string = ",\"TransactionPercentile\":"
		out.RawString(prefix)
		if in.TransactionPercentile == nil {
			out.RawString("null")
		} else {
			out.Uint16(uint16(*in.TransactionPercentile))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BlockHistoryEstimator) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV212(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BlockHistoryEstimator) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV212(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BlockHistoryEstimator) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV212(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BlockHistoryEstimator) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV212(l, v)
}
func easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV213(in *jlexer.Lexer, out *BalanceMonitor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Enabled":
			if in.IsNull() {
				in.Skip()
				out.Enabled = nil
			} else {
				if out.Enabled == nil {
					out.Enabled = new(bool)
				}
				*out.Enabled = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV213(out *jwriter.Writer, in BalanceMonitor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Enabled\":"
		out.RawString(prefix[1:])
		if in.Enabled == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Enabled))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BalanceMonitor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV213(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BalanceMonitor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV213(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BalanceMonitor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV213(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BalanceMonitor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV213(l, v)
}
func easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV214(in *jlexer.Lexer, out *Automation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "GasLimit":
			if in.IsNull() {
				in.Skip()
				out.GasLimit = nil
			} else {
				if out.GasLimit == nil {
					out.GasLimit = new(uint32)
				}
				*out.GasLimit = uint32(in.Uint32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV214(out *jwriter.Writer, in Automation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"GasLimit\":"
		out.RawString(prefix[1:])
		if in.GasLimit == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.GasLimit))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Automation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV214(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Automation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV214(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Automation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV214(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Automation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComSmartcontractkitChainlinkCoreChainsEvmConfigV214(l, v)
}
