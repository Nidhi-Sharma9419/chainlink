//go:build go1.6
// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package v2

import (
	"errors"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"sort"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF82517 = 1
	codecSelferCcRAW2517  = 255
	// ----- value types used ----
	codecSelferValueTypeArray2517     = 10
	codecSelferValueTypeMap2517       = 9
	codecSelferValueTypeString2517    = 6
	codecSelferValueTypeInt2517       = 2
	codecSelferValueTypeUint2517      = 3
	codecSelferValueTypeFloat2517     = 4
	codecSelferValueTypeNil2517       = 1
	codecSelferBitsize2517            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil2517 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct2517                = errors.New(`only encoded map or array can be decoded into a struct`)
	_                                              sort.Interface = nil
)

type codecSelfer2517 struct{}

func codecSelfer2517False() bool { return false }
func codecSelfer2517True() bool  { return true }

type codecSelfer2517stringSlice []string

func (p codecSelfer2517stringSlice) Len() int           { return len(p) }
func (p codecSelfer2517stringSlice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer2517stringSlice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer2517uint64Slice []uint64

func (p codecSelfer2517uint64Slice) Len() int           { return len(p) }
func (p codecSelfer2517uint64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer2517uint64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer2517int64Slice []int64

func (p codecSelfer2517int64Slice) Len() int           { return len(p) }
func (p codecSelfer2517int64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer2517int64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer2517float64Slice []float64

func (p codecSelfer2517float64Slice) Len() int           { return len(p) }
func (p codecSelfer2517float64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer2517float64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

func init() {
	if codec1978.GenVersion != 26 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic(errors.New("codecgen version mismatch: current: 26, need " + ver + ". Re-generate file: " + file))
	}
}

func (BlockHistoryEstimator) codecSelferViaCodecgen() {}
func (x *BlockHistoryEstimator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2517
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		var yyn3 bool = x.BatchSize == nil
		var yyn4 bool = x.BlockHistorySize == nil
		var yyn5 bool = x.CheckInclusionBlocks == nil
		var yyn6 bool = x.CheckInclusionPercentile == nil
		var yyn7 bool = x.EIP1559FeeCapBufferBlocks == nil
		var yyn8 bool = x.TransactionPercentile == nil
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(6)
			if yyn3 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				yy9 := *x.BatchSize
				r.EncodeUint(uint64(yy9))
			}
			if yyn4 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				yy11 := *x.BlockHistorySize
				r.EncodeUint(uint64(yy11))
			}
			if yyn5 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				yy13 := *x.CheckInclusionBlocks
				r.EncodeUint(uint64(yy13))
			}
			if yyn6 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				yy15 := *x.CheckInclusionPercentile
				r.EncodeUint(uint64(yy15))
			}
			if yyn7 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				yy17 := *x.EIP1559FeeCapBufferBlocks
				r.EncodeUint(uint64(yy17))
			}
			if yyn8 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				yy19 := *x.TransactionPercentile
				r.EncodeUint(uint64(yy19))
			}
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(6)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"BatchSize\"")
				} else {
					r.EncodeString(`BatchSize`)
				}
				z.EncWriteMapElemValue()
				if yyn3 {
					r.EncodeNil()
				} else {
					yy21 := *x.BatchSize
					r.EncodeUint(uint64(yy21))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"BlockHistorySize\"")
				} else {
					r.EncodeString(`BlockHistorySize`)
				}
				z.EncWriteMapElemValue()
				if yyn4 {
					r.EncodeNil()
				} else {
					yy23 := *x.BlockHistorySize
					r.EncodeUint(uint64(yy23))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"CheckInclusionBlocks\"")
				} else {
					r.EncodeString(`CheckInclusionBlocks`)
				}
				z.EncWriteMapElemValue()
				if yyn5 {
					r.EncodeNil()
				} else {
					yy25 := *x.CheckInclusionBlocks
					r.EncodeUint(uint64(yy25))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"CheckInclusionPercentile\"")
				} else {
					r.EncodeString(`CheckInclusionPercentile`)
				}
				z.EncWriteMapElemValue()
				if yyn6 {
					r.EncodeNil()
				} else {
					yy27 := *x.CheckInclusionPercentile
					r.EncodeUint(uint64(yy27))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"EIP1559FeeCapBufferBlocks\"")
				} else {
					r.EncodeString(`EIP1559FeeCapBufferBlocks`)
				}
				z.EncWriteMapElemValue()
				if yyn7 {
					r.EncodeNil()
				} else {
					yy29 := *x.EIP1559FeeCapBufferBlocks
					r.EncodeUint(uint64(yy29))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"TransactionPercentile\"")
				} else {
					r.EncodeString(`TransactionPercentile`)
				}
				z.EncWriteMapElemValue()
				if yyn8 {
					r.EncodeNil()
				} else {
					yy31 := *x.TransactionPercentile
					r.EncodeUint(uint64(yy31))
				}
			} else {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"BatchSize\"")
				} else {
					r.EncodeString(`BatchSize`)
				}
				z.EncWriteMapElemValue()
				if yyn3 {
					r.EncodeNil()
				} else {
					yy33 := *x.BatchSize
					r.EncodeUint(uint64(yy33))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"BlockHistorySize\"")
				} else {
					r.EncodeString(`BlockHistorySize`)
				}
				z.EncWriteMapElemValue()
				if yyn4 {
					r.EncodeNil()
				} else {
					yy35 := *x.BlockHistorySize
					r.EncodeUint(uint64(yy35))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"CheckInclusionBlocks\"")
				} else {
					r.EncodeString(`CheckInclusionBlocks`)
				}
				z.EncWriteMapElemValue()
				if yyn5 {
					r.EncodeNil()
				} else {
					yy37 := *x.CheckInclusionBlocks
					r.EncodeUint(uint64(yy37))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"CheckInclusionPercentile\"")
				} else {
					r.EncodeString(`CheckInclusionPercentile`)
				}
				z.EncWriteMapElemValue()
				if yyn6 {
					r.EncodeNil()
				} else {
					yy39 := *x.CheckInclusionPercentile
					r.EncodeUint(uint64(yy39))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"EIP1559FeeCapBufferBlocks\"")
				} else {
					r.EncodeString(`EIP1559FeeCapBufferBlocks`)
				}
				z.EncWriteMapElemValue()
				if yyn7 {
					r.EncodeNil()
				} else {
					yy41 := *x.EIP1559FeeCapBufferBlocks
					r.EncodeUint(uint64(yy41))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.EncWr().WriteStr("\"TransactionPercentile\"")
				} else {
					r.EncodeString(`TransactionPercentile`)
				}
				z.EncWriteMapElemValue()
				if yyn8 {
					r.EncodeNil()
				} else {
					yy43 := *x.TransactionPercentile
					r.EncodeUint(uint64(yy43))
				}
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *BlockHistoryEstimator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2517
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil2517 {
		*(x) = BlockHistoryEstimator{}
	} else if yyct2 == codecSelferValueTypeMap2517 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray2517 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2517)
	}
}

func (x *BlockHistoryEstimator) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2517
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; z.DecContainerNext(yyj3, l, yyhl3); yyj3++ {
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "BatchSize":
			if r.TryNil() {
				if x.BatchSize != nil { // remove the if-true
					x.BatchSize = nil
				}
			} else {
				if x.BatchSize == nil {
					x.BatchSize = new(uint32)
				}
				*x.BatchSize = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}
		case "BlockHistorySize":
			if r.TryNil() {
				if x.BlockHistorySize != nil { // remove the if-true
					x.BlockHistorySize = nil
				}
			} else {
				if x.BlockHistorySize == nil {
					x.BlockHistorySize = new(uint16)
				}
				*x.BlockHistorySize = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}
		case "CheckInclusionBlocks":
			if r.TryNil() {
				if x.CheckInclusionBlocks != nil { // remove the if-true
					x.CheckInclusionBlocks = nil
				}
			} else {
				if x.CheckInclusionBlocks == nil {
					x.CheckInclusionBlocks = new(uint16)
				}
				*x.CheckInclusionBlocks = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}
		case "CheckInclusionPercentile":
			if r.TryNil() {
				if x.CheckInclusionPercentile != nil { // remove the if-true
					x.CheckInclusionPercentile = nil
				}
			} else {
				if x.CheckInclusionPercentile == nil {
					x.CheckInclusionPercentile = new(uint16)
				}
				*x.CheckInclusionPercentile = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}
		case "EIP1559FeeCapBufferBlocks":
			if r.TryNil() {
				if x.EIP1559FeeCapBufferBlocks != nil { // remove the if-true
					x.EIP1559FeeCapBufferBlocks = nil
				}
			} else {
				if x.EIP1559FeeCapBufferBlocks == nil {
					x.EIP1559FeeCapBufferBlocks = new(uint16)
				}
				*x.EIP1559FeeCapBufferBlocks = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}
		case "TransactionPercentile":
			if r.TryNil() {
				if x.TransactionPercentile != nil { // remove the if-true
					x.TransactionPercentile = nil
				}
			} else {
				if x.TransactionPercentile == nil {
					x.TransactionPercentile = new(uint16)
				}
				*x.TransactionPercentile = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *BlockHistoryEstimator) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2517
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyb16 = !z.DecContainerNext(yyj16, l, yyhl16)
	if yyb16 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.BatchSize != nil { // remove the if-true
			x.BatchSize = nil
		}
	} else {
		if x.BatchSize == nil {
			x.BatchSize = new(uint32)
		}
		*x.BatchSize = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
	}
	yyj16++
	yyb16 = !z.DecContainerNext(yyj16, l, yyhl16)
	if yyb16 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.BlockHistorySize != nil { // remove the if-true
			x.BlockHistorySize = nil
		}
	} else {
		if x.BlockHistorySize == nil {
			x.BlockHistorySize = new(uint16)
		}
		*x.BlockHistorySize = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
	}
	yyj16++
	yyb16 = !z.DecContainerNext(yyj16, l, yyhl16)
	if yyb16 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.CheckInclusionBlocks != nil { // remove the if-true
			x.CheckInclusionBlocks = nil
		}
	} else {
		if x.CheckInclusionBlocks == nil {
			x.CheckInclusionBlocks = new(uint16)
		}
		*x.CheckInclusionBlocks = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
	}
	yyj16++
	yyb16 = !z.DecContainerNext(yyj16, l, yyhl16)
	if yyb16 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.CheckInclusionPercentile != nil { // remove the if-true
			x.CheckInclusionPercentile = nil
		}
	} else {
		if x.CheckInclusionPercentile == nil {
			x.CheckInclusionPercentile = new(uint16)
		}
		*x.CheckInclusionPercentile = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
	}
	yyj16++
	yyb16 = !z.DecContainerNext(yyj16, l, yyhl16)
	if yyb16 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.EIP1559FeeCapBufferBlocks != nil { // remove the if-true
			x.EIP1559FeeCapBufferBlocks = nil
		}
	} else {
		if x.EIP1559FeeCapBufferBlocks == nil {
			x.EIP1559FeeCapBufferBlocks = new(uint16)
		}
		*x.EIP1559FeeCapBufferBlocks = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
	}
	yyj16++
	yyb16 = !z.DecContainerNext(yyj16, l, yyhl16)
	if yyb16 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.TransactionPercentile != nil { // remove the if-true
			x.TransactionPercentile = nil
		}
	} else {
		if x.TransactionPercentile == nil {
			x.TransactionPercentile = new(uint16)
		}
		*x.TransactionPercentile = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
	}
	yyj16++
	for yyj16++; z.DecContainerNext(yyj16, l, yyhl16); yyj16++ {
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj16-1, "")
	}
}

func (x *BlockHistoryEstimator) IsCodecEmpty() bool {
	return !(false)
}
